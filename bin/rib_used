#!/usr/bin/perl -w

##############################################################################
#
#                                 rib_used
#
# DESCRIPTION:
# Creates and maintain a DB of local disk space for incremental rsync dumps
#
##############################################################################

##########################
# Initialization section #
##########################

require 5.00;
use strict;
use IO::File;
use Cwd;
use File::Glob ':glob', ':case';
use Date::Manip;

# Default umask
umask 027;

# Program's name and version number.
our $VERSION   = "2.0";
my ($BASENAME) = ($0 =~ /([^\/]+)$/);

# Get login name.
my $USER=getpwuid($<) || getlogin || die "Can't find USER from environment!\n";
my $HOME=(getpwuid($<))[7] || $ENV{'HOME'} || die "Can't find HOME ?!?\n";

#########
# Usage #
#########

sub Usage { # private
    print <<USAGE;
$BASENAME $VERSION

Usage: $BASENAME command [options] [-F dbfile] [inc_base] [inc_base...]

Options:

  * Select incremental backup location:
       [-D dir]          Directory of all incremental backups

  * Select the DB file
       [-F dbfile]       The database file. By default: "\$HOME/.db_inc_du.tab"

  * Commands:

       update inc_base [inc_base...]
          -> Will update the database file 'dbfile' in situ by scanning the inc_base(s)

       show   [inc_base] [inc_base...]
          -> Will show the used space for all the revisions inc_base.

  * Options for 'show' command:
       [-A afterdate]    Only report backups AFTER afterdate
       [-B beforedate]   Only report backups BEFORE beforedate
       [-m size]         Only report backups using more than 'size'
       [-M size]         Only report backups using less than 'size'
       [-h]              No headers
       [-k]              All sizes will be reported in Kb
       [-r]              Show reports in reverse order of dates
       [-H]              Show histogram

  * Options for 'update' command:
       [-P]              Will purge from the DB all inc_bases that
                         are not supplied on the command-line!

About sizes:
   They can be specified with suffixes, e.g. "1k", "22m", "22G", "5T";
   note that this program tracks disk sizes in integer multiples of kilobytes.

About dates: They can be specified as:
   2013        whole year
   2013-04     year + month
   2013-04-17  specific date
   \@0          today
   \@3          three days before today

   Note: Date boundaries are inclusive.

About the arguments:
   The inc_base arguments are subpath to entire sets of incremental backups.
   They should point to existing subdirectories under the -D dir option.
   For instance, "amnesia/amnesia_root" or "netmind_vms/demo/demo_usr_local" etc.
   Patterns can be used, e.g. "amnesia/*" or "*" or "*/*_root" etc.

USAGE
    exit 1;
}

##################################
# Global variables and constants #
##################################

my $DEBUG=0;
my $ALL_BACKUPS_BASEDIR=".";        # -D
my $AFTER_DATE="";                  # -A
my $BEFORE_DATE="";                 # -B
my $NO_HEADERS=0;                   # -h
my $FORMAT_SIZES='pretty';          # -k
my $REVERSE_DATES=0;                # -r
my $MIN_SIZE=0;                     # -m
my $MAX_SIZE=999_999_999_999_999;   # -M
my $PURGE_ALL=0;                    # -P
my $SHOW_HISTO=0;                   # -H

my $COMMAND=(@ARGV > 0 && $ARGV[0] =~ /update|show/i) ? uc(shift(@ARGV)) : "";
my $DBFILE="$HOME/.db_inc_du.tab";

##############################
# Parse command-line options #
##############################

for (;@ARGV;) {
    # Add in the regex [] ALL single-character command-line options
    my ($opt,$arg) = ($ARGV[0] =~ /^-([\@FPDABkhrmMH])(.*)$/);
    last if ! defined $opt;
    # Add in regex [] ONLY single-character options that
    # REQUIRE an argument, except for the '@' debug switch.
    if ($opt =~ /[FDABmM]/ && $arg eq "") {
        if (@ARGV < 2) {
            print "Argument required for option \"$opt\".\n";
            exit 1;
        }
        shift;
        $arg=$ARGV[0];
    }
    $DEBUG=($arg ? $arg : 1)                     if $opt eq '@';
    $ALL_BACKUPS_BASEDIR=$arg                    if $opt eq 'D';
    $BEFORE_DATE=$arg                            if $opt eq 'B';
    $AFTER_DATE=$arg                             if $opt eq 'A';
    $FORMAT_SIZES='k'                            if $opt eq 'k';
    $NO_HEADERS=1                                if $opt eq 'h';
    $REVERSE_DATES=1                             if $opt eq 'r';
    $MIN_SIZE=&ValidSize($arg)                   if $opt eq 'm';
    $MAX_SIZE=&ValidSize($arg)                   if $opt eq 'M';
    $PURGE_ALL=1                                 if $opt eq 'P';
    $SHOW_HISTO=1                                if $opt eq 'H';
    $DBFILE=$arg                                 if $opt eq 'F';
    shift;
}

#################################
# Validate command-line options #
#################################

# We support invoking the program with the command before or after the options...

&Usage if $COMMAND eq "" && @ARGV < 1;
$COMMAND ||= uc shift;
our @BASES = @ARGV; # and they belong to you.

if ($COMMAND !~ /^(update|show)$/i) {
    die "Command must be one of 'update' or 'show'.\n";
}

$AFTER_DATE  = &ValidateDate($AFTER_DATE)  if $AFTER_DATE;
$BEFORE_DATE = &ValidateDate($BEFORE_DATE) if $BEFORE_DATE;

die "Cannot find DB file '$DBFILE'. Touch it if this is the first 'update' invokation.\n"
    unless -f $DBFILE;

################
# Trap Signals #
################

sub SigCleanup { # private
     die "\nExiting: received signal \"" . $_[0] . "\".\n";
}
$SIG{'INT'}  = \&SigCleanup;
$SIG{'TERM'} = \&SigCleanup;
$SIG{'HUP'}  = \&SigCleanup;
$SIG{'QUIT'} = \&SigCleanup;
$SIG{'PIPE'} = \&SigCleanup;
$SIG{'ALRM'} = \&SigCleanup;

###############################
#   M A I N   P R O G R A M   #
###############################

our $FULL_DB=&ReadDB($DBFILE);

if ($COMMAND eq "UPDATE") {
    &Usage unless @BASES > 0;
    &UpdateDB($FULL_DB, \ @BASES);
    &WriteDB($DBFILE, $FULL_DB);
}

if ($COMMAND eq "SHOW") {
    @BASES = ( '*' ) if @BASES == 0;
    &ShowStats($FULL_DB, \ @BASES);
}

exit 0;

#############################
#   S U B R O U T I N E S   #
#############################

sub ShowStats {
    my $db = shift;
    my $bases = shift;

    my $matched_bases = &MatchOnceInOrder($bases, [ sort keys % $db ]);
   
    foreach my $base (@$matched_bases) {
        my $dbrevs = $db->{$base};
        if (! $dbrevs) {
            print "No entries in DB file for base '$base'.\n";
            next;
        }
        my @dbrevs = sort keys %$dbrevs;
        @dbrevs = reverse(@dbrevs) if $REVERSE_DATES;

        my @reports = ();
        my $histo_min = 999_999_999; # in Ks
        my $histo_max = 0;           # in Ks
        my @histo_vals = ();
        foreach my $dbrev (@dbrevs) {
            my $spacedeps = $dbrevs->{$dbrev} || [];
            my $space     = $spacedeps->[0]   || 0;

            # Filter
            next if $space*1024 < $MIN_SIZE;
            next if $space*1024 > $MAX_SIZE;

            # Generate pretty report line
            my $pretty = $FORMAT_SIZES eq 'k' ? $space : &Pretty_K_Size($space);
            my ($date,$h,$m,$s) = ($dbrev =~ /\.(20\d\d-\d\d-\d\d)T(\d\d)(\d\d)(\d\d)$/);
            next if $BEFORE_DATE && $date gt $BEFORE_DATE;
            next if $AFTER_DATE  && $date lt $AFTER_DATE;
            my $time = "$h:$m:$s";
            #my $report = sprintf "%9s\t%s\t%s\t%s\n",$pretty,$base,$date,$time;
            my $report = sprintf "%9s %s %s %s\n",$pretty,$date,$time,$base;
            push(@reports,$report);

            # Record info for histogram
            $histo_min = $space if $space < $histo_min;
            $histo_max = $space if $space > $histo_max;
            push(@histo_vals,$space);
        }

        if ($SHOW_HISTO) {
            my $diff = $histo_max - $histo_min; $diff = 1 if $diff < 1;
            for (my $i=0;$i<@histo_vals;$i++) {
                my $val = $histo_vals[$i] || $histo_min;
                my $offset = $val - $histo_min; $offset = 0 if $offset < 0;
                my $stars  = 1+int(10*$offset/$diff); $stars = 10 if $stars > 10;
                my $line = sprintf "%-10s", ("*" x $stars);
                $reports[$i] = "$line " .  $reports[$i];
            }
        }

        my $report = join("",@reports);
        if ($report && ! $NO_HEADERS) {
            $report =
            "\n" .
            "========================================================================\n" .
            "$base\n" .
            "========================================================================\n" .
            "\n" .
            $report
        }
        print $report;
    }
}

sub UpdateDB {
    my $db = shift;
    my $bases = shift;

    # Save cwd and switch to base
    my $cwd  = getcwd();
    chdir($ALL_BACKUPS_BASEDIR) or die "Can't CD to '$ALL_BACKUPS_BASEDIR': $!\n";
    my $all_revs = {};
    foreach my $base (@$bases) {
        my $revs = &FindAllRevs($base);
        foreach my $rev (@$revs) {
           $all_revs->{$rev}++;
        }
    }

    my @sorted_all_revs = sort keys %$all_revs;
    my $base2revs={};
    foreach my $rev (@sorted_all_revs) {
        next unless $rev =~ /^(\S+)\.20\d\d-\d\d-\d\dT\d\d\d\d\d\d$/;
        my $base = $1;
        my $list = $base2revs->{$base} ||= [];
        push(@$list,$rev);
    }

    &PruneOldRevs(     $db, $base2revs);
    &ComputeUsedSpaces($db, $base2revs);

    chdir($cwd) or die "Can't CD back to '$cwd': $!\n";
}


sub QuotedArg {
    my $arg = shift;
    $arg =~ s/'/'\\''/g;
    $arg = "'$arg'";
    $arg;
}

sub FindAllRevs {
    my $base  = shift;
    my @all_bases = bsd_glob("$base.20[0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9][0-9][0-9][0-9][0-9]");
    my $bases = [];
    foreach my $base (@all_bases) {
      next unless $base =~ /\.(20\d\d-\d\d-\d\d)T\d\d\d\d\d\d$/;
      #my $date = $1;
      #next if $BEFORE_DATE && $date gt $BEFORE_DATE;
      #next if $AFTER_DATE  && $date lt $AFTER_DATE;
      push(@$bases,$base);
    }
    $bases;
}

sub ComputeUsedSpaces {
    my $db        = shift;
    my $base2revs = shift;

    foreach my $base (sort keys %$base2revs) {
        my $revs = $base2revs->{$base} || [];
        my $num  = @$revs;
        my $DBrevs = $db->{$base} ||= {};
        for (my $i=0;$i<@$revs;$i++) {
            my $iPlus = $i+1;
            my $rev   = $revs->[$i];
            my $prev  = $i >  0        ? $revs->[$i-1] : "-";
            my $next  = $i <  @$revs-1 ? $revs->[$i+1] : "-";

            my ($prevDT,$nextDT) = ($prev,$next);  # full ids...
            $prevDT = $1 if $prev =~ /\.(20\d\d-\d\d-\d\dT\d\d\d\d\d\d)$/;  # ... replaced by just 2014-01-01T123456
            $nextDT = $1 if $next =~ /\.(20\d\d-\d\d-\d\dT\d\d\d\d\d\d)$/;

            # Figure out if we need to run this
            my $dbdeps = $DBrevs->{$rev}; # do we have info about this having been computer in the past?
            my $done  = defined($dbdeps)      &&  # a triplet: size, prev, next
                        defined($dbdeps->[0]) &&  # size
                        defined($dbdeps->[1]) &&  # prev, last time we computed the size
                        defined($dbdeps->[2]);    # next, last time we computed the size
            if ($done) { # was it computed the same way, with same prev and next?
                my $cursig = $prevDT lt $nextDT ? "!$prevDT!$nextDT!" : "!$nextDT!$prevDT!";
                my $dbsig  = "!" . $dbdeps->[1] . "!" . $dbdeps->[2] . "!";
                $done = 0 if $cursig ne $dbsig;
            }
            print "Exists: $iPlus/$num $rev\n" if $DEBUG >= 2 && $done;
            next if $done;

            # Run DU command
            print "Scanning: $iPlus/$num $rev\n" if $DEBUG;
            my $qprev  = $prev ne "-" ? &QuotedArg($prev) : "";
            my $qnext  = $next ne "-" ? &QuotedArg($next) : "";
            my $qrev   = &QuotedArg($rev);
            my $com    = "du -k -s $qprev $qnext $qrev"; # the order is important because of hard links!
            print " -> Command: $com\n" if $DEBUG >= 3;
            my @du_out = `$com`;

            # Parse output
            my $sum    = $du_out[-1]; # only last line is interesting
            my $space  = $1 if $sum =~ /^(\d+)\s+/;
            print " -> Space found: $space\n" if $DEBUG >= 2;
            die "Can't find DU output for '$rev' ? Got : '$space'.\n" if $space eq "";
            $DBrevs->{$rev} = [ $space, $prevDT, $nextDT ]; # order of prev and next will be fixed by DB writer code
        }
    }
}

sub PruneOldRevs {
    my $db        = shift;
    my $base2revs = shift;

    if ($PURGE_ALL) {
        foreach my $base (keys %$db) {
            next if $base2revs->{$base};
            print "Purging DB of base: $base\n" if $DEBUG;
            delete $db->{$base};
        }
    }
    foreach my $base (keys %$db) {
        my $revs   = $base2revs->{$base};
        next unless $revs;
        my $revsH  = {};
        foreach my $rev (@$revs) {
            $revsH->{$rev} = 1;
        }
        my $dbrevs = $db->{$base}        || {};
        foreach my $dbrev (keys %$dbrevs) {
           next if exists($revsH->{$dbrev});
           print "Purging DB of revision: $dbrev\n" if $DEBUG;
           delete $dbrevs->{$dbrev};
        }
    }
}

sub ReadDB {
    my $file = shift;
    my $db = {};
    my $fh = IO::File->new($file,"r") or die "Cannot find DB file '$file': $!\n";
    while (my $line = <$fh>) {
        next if $line =~ /^\s*$|^\s*#/;
        my ($space,$rev,$d1,$d2) = ($line =~ /^(\d+)\t(\S+)\t?(\S*)\t?(\S*)\s*$/);
        my $base = $rev;
        $d1 ||= "-";
        $d2 ||= "-";
        ($d1,$d2) = ($d2,$d1) if $d2 lt $d1;
        $base =~ s/\.20\d\d-\d\d-\d\dT\d\d\d\d\d\d$//;
        die "Wrong DB?!? REV=$rev; BASE=$base\n" if $rev eq $base;
        $db->{$base} ||= {};
        $db->{$base}->{$rev} = [ $space, $d1, $d2 ];
    }
    $db;
}

sub WriteDB {
    my $file = shift;
    my $db   = shift;

    rename($file,"$file.bak");
    my $fh = IO::File->new($file,"w") or die "Can't write to '$file': $!\n";

    print $fh <<HEADER;

#
# This file created automatically by $BASENAME version $VERSION .
# It contains a database of used disk space (in Ks) for each incremental backup.
# Nice reports can be generated with the command '$BASENAME show'.
#
# The format of this table is:
#
#   size   incremental_base_dump_name   surrounding_dump_1_datetime    surrounding_dump_2_datetime
#
# The two surrounding_dump values are used to identify which entries need to be recomputed.
#

HEADER
    
    foreach my $base (sort keys %$db) {
        my $dbrevs = $db->{$base};
        next unless $dbrevs;
        foreach my $dbrev (sort keys %$dbrevs) {
            my $spacedeps = $dbrevs->{$dbrev};
            my ($space,$d1,$d2) = @$spacedeps;
            $d1 ||= "-";
            $d2 ||= "-";
            ($d1,$d2) = ($d2,$d1) if $d2 lt $d1;
            print $fh "$space\t$dbrev\t$d1\t$d2\n";
        }
    }
    $fh->close();
}

sub Pretty_K_Size {
    my $kbytes = shift; # size in kilobytes !
    my $pretty = "$kbytes Kb";
    $pretty = sprintf("%3.1f Mb",$kbytes/(1024))           if $kbytes > (1024);
    $pretty = sprintf("%3.1f Gb",$kbytes/(1024*1024))      if $kbytes > (1024*1024);
    $pretty = sprintf("%3.1f Tb",$kbytes/(1024*1024*1024)) if $kbytes > (1024*1024*1024);
    $pretty;
}

sub ValidateDate {
  my $date = shift;
  if ($date =~ /^\@(\d+)$/) {
    my $ago = ParseDate("$1 days ago");
    my $tt  = UnixDate($ago,"%Y-%m-%d");
    print STDERR "Computed past date: $tt\n" if $DEBUG;
    return $tt;
  }
  if ($date !~ /^\d\d\d\d(-\d\d(-\d\d)?)?$/) {
    die "Illegal date format: should be YYYY or YYYY-MM or YYYY-MM-DD or \@nn\n";
  }
  return $date;
}

sub MatchOnceInOrder {
    my $patterns = shift; # array of file patterns
    my $bases    = shift;

    my @regexps = ();
    foreach my $pat (@$patterns) {
       my $re = $pat;
       $re =~ s/\*/.*/g;
       $re =~ s/\?/./g;
       push(@regexps,$re);
    }

    my @selected = ();
    my %selected = ();
    my @dest_bases = @$bases;
    foreach my $re (@regexps) {
       @dest_bases = grep( ! $selected{$_}, @dest_bases );
       last if @dest_bases == 0;
       foreach my $base (@$bases) {
           next unless eval { $base =~ m!^$re$! };
           push(@selected, $base);
           $selected{$base} = 1;
       }
    }

    \ @selected;
}

sub ValidSize {
  my $size = shift; # can be any int optionally followed by k, m, g or t
  die "Values for -m -M -c and -C should be int, optionally followed by K, M, G or T\n"
    unless $size =~ /^\s*(\d+)\s*([kmgt]?)\s*$/i;
  my ($val,$suffix) = ($1,$2);
  return $val                             if $suffix eq "";
  return $val * 1024                      if $suffix =~ /k/i;
  return $val * 1024 * 1024               if $suffix =~ /m/i;
  return $val * 1024 * 1024 * 1024        if $suffix =~ /g/i;
  return $val * 1024 * 1024 * 1024 * 1024 if $suffix =~ /t/i;
  die "Oh oh.\n";
}

